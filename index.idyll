[meta title:"Idyll Custom Components" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"WIP: Idyll Custom Components"
  subtitle:"Creating your own custom components in Idyll"
  author:"Alan Tan"
  authorLink:"https://github.com/tanalan"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
/]

## Introduction

Idyll is already rich with many [built-it](https://idyll-lang.org/docs/components) components.
This article serves as a tutorial for writing your own custom components (in React)
in Idyll, and is an extension to Idyll's [current docs](https://idyll-lang.org/docs/components/custom) with custom components.

**TODO** This article assumes basic knowledge from Idyll's docs. (Wording?).

Since Idyll components are React components under the hood, it may be good to be familiar with the basics of React.
Their [docs](https://reactjs.org/docs/getting-started.html) are well documented, and serve as a great starting point for learning React.


> Idyll posts are designed to support interaction and data-driven graphics.

I will focus on creating a (basic?) custom component emphasizes Idyll's interaction functionality, and ....??? TODO

## Core custom component ideas

Very important to an Idyll document's interactivity is its interaction with **variables**. This is important for
writing custom components that have interactivity with users, as well as other components.

## Writing custom components

In Idyll, a variable can be *binded* to a component's property (`prop`). If this variable is updated, all
components with a bind to this variable also updates with this new value.
[br /]
In particular, for all custom components, Idyll injects an `updateProps`
method into the `props` object of a custom component. We pass our variables
into a custom component's `props`, and the component can `updateProps`, which
facilitate interaction, because these same variables' updated values will affect its other components!
[br/]

This is very powerful.

I demonstrate this by interacting with a small basic custom component, `TwoColors`.
Try clicking on a colored section below, and notice how the color selected text changes.

[var name:"theCurrentColor" value:undefined /]
[TwoColors selectedColor:theCurrentColor /]

The color clicked is [Display value:`theCurrentColor ? theCurrentColor : "not yet chosen"` /]

Let's go over how I made this!

I defined my own custom component, `TwoColors`, in a file called `two-colors.js` in my components/ folder, so Idyll knows about it.
The contents start out in a basic React template:

```
import React from 'react';

class TwoColors extends React.PureComponent {
  constructor(props) {
    super(props);
  }

  render() {
    // ... rendered output here
  }
}

export default TwoColors;
```

Note: The `export default TwoColors;` statement  allows Idyll to find the component `TwoColors`.
See [export](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) docs for more info.

Now, let's render two squares of 100x100 pixels. We will render them as `div`s, and wrap them inside a container `div`.
So now, `render()` looks like:

```
render() {
  return (
    <div>
      <div
        className="square-green"
        style={{
          backgroundColor: 'green',
          width: '100px',
          height: '100px',
          textAlign: 'center'
        }}
      >
        Green 
      </div>
      <div
        className="square-orange"
        style={{
          backgroundColor: 'orange',
          width: '100px',
          height: '100px',
          textAlign: 'center'
        }}
      >
        Orange
      </div>
    </div>
  );
}
```

I injected CSS styling into the square `div`'s `style` property.

Now, inside our `index.idyll` file, we can create a `TwoColors` component via:

```
[TwoColors /]
```
and we get the output:

[TwoColors /]

Great! Now, let's add some interactivity!
Inside `index.idyll`, we define a variable that will track the last clicked color.
Because we initially haven't clicked any color, we'll initialize the variable's value to `undefined`.

```
[var name:"lastClickedColor" value:undefined /]
```

Then, we'll *bind* this variable to a property of `TwoColors`! Let's call this property `selectedColor`, just to
differentiate between our variable and the prop.

```
[var name:"lastClickedColor" value:undefined /]
[TwoColors selectedColor:lastClickedColor /]
```

Inside `TwoColors`, we'll add a click event to each square, and upon clicking, the square will update the `selectedColor` prop,
which will update our `lastClickedColor` variable. Let's add `onClick` events to both squares. Our updated `render()` looks like:

```
render() {
  // TODO Would it be okay to use `React.Fragment` instead? Or unnecessary information?
  return (
    <div>
      <div
        className="square-green"
        style={{
          backgroundColor: 'green',
          width: '100px',
          height: '100px',
          textAlign: 'center'
        }}
        onClick={() => this.changePropsColor('green')}
      >
        Green 
      </div>
      <div
        className="square-orange"
        style={{
          backgroundColor: 'orange',
          width: '100px',
          height: '100px',
          textAlign: 'center'
        }}
        onClick={() => this.changePropsColor('orange')}
      >
        Orange
      </div>
    </div>
  );
}
```

Let's also define the `changePropsColor` function! It will accept a `color` parameter,
and then `updateProps()` to the clicked color! (Notice how we passed `green` and `orange`, respectively).

```
constructor(props) {
  super(props);
  
  this.changePropsColor = this.changePropsColor.bind(this);
}

changePropsColor(color) {
  this.props.updateProps({ // This uses the `updateProps` method that Idyll injects into components
    currentColor: color
  });
}
```

Note: I added that `bind` call in the constructor because of how class methods work in Javascript. Read more [here](https://reactjs.org/docs/handling-events.html).

Now, when we click on a square, the `changePropsColor` function is called, and the `selectedColor` prop updates to the color clicked,
and then the `lastClickedColor` variable becomes updated to the color selected ("green" or "orange").

Finally, let's now display our `lastClickedColor` to see it update live!

We'll use Idyll's default Display component to display the variable!

// ```
// [var name:"lastClickedColor" value:undefined /]
// [TwoColors selectedColor:lastClickedColor /]
// The color clicked is [Display value:`lastClickedColor ? lastClickedColor : "not yet chosen"` /]
// ```

```
[var name:"lastClickedColor" value:undefined /]
[TwoColors selectedColor:lastClickedColor /]

The color clicked is [Display value:`lastClickedColor ? lastClickedColor : "not yet chosen"` /]
```

Which results in what we saw before:
[var name:"lastClickedColor" value:undefined /]
[TwoColors selectedColor:lastClickedColor /]

The color clicked is [Display value:`lastClickedColor ? lastClickedColor : "not yet chosen"` /]

## A custom budget component

Let's work on a more interesting component.
This will be a budgeter component where 

A budgeter bar where the user interacts by having a budget amount, and adding spendings that will change how the bar looks.
This way, they can get a visualization of how much of their budget is going into what category.

[Budgeter /]
